{"version":3,"sources":["../src/index.ts","../src/payment-instruction.ts","../src/types.ts","../src/data/networks.ts","../src/utils/format.ts","../src/utils/paseto.ts","../src/utils/validate.ts"],"sourcesContent":["export * from \"./payment-instruction\";\nexport * from \"./utils\";\n","import { ConsumeOptions } from \"paseto\";\nimport * as superstruct from \"superstruct\";\n\nimport { CoinCode, InstructionPayload, NetworkCode } from \"./types\";\nimport { biggerThanZero, PasetoV4Handler } from \"./utils\";\n\n/**\n * Class to handle payment instruction token (qr-crypto token) creation with payload validation\n *\n * @param issuerDomain - string\n * @returns\n * `PaymentInstructionsBuilder`\n *\n * @example\n * ```ts\n * const builder = new PaymentInstructionsBuilder();\n * ```\n */\n\nexport class PaymentInstructionsBuilder {\n  private pasetoHandler: PasetoV4Handler;\n\n  constructor(private issuerDomain: string) {\n    this.pasetoHandler = new PasetoV4Handler();\n  }\n\n  /**\n   * Create a QR-Crypto payment instruction token\n   *\n   * @param parameters - { payload: InstructionPayload; secretKey: string; }\n   *\n   * @returns\n   * `string`\n   *\n   *\n   * @example\n   * ```ts\n   * const issuerDomain = \"qrCrypto.com\";\n   * const builder = new PaymentInstructionsBuilder(issuerDomain);\n   *\n   * const secretKey = \"...\";\n   * const keyId = \"key-id-one\";\n   *\n   * builder.create({\n   *   payload: {\n   *     payment: {\n   *       id: \"payment-id\",\n   *       address: \"crypto-address\",\n   *       network_code: NetworkCode.TRON,\n   *       coin_code: CoinCode.TRON_USDT,\n   *       is_open: true,\n   *     },\n   *   },\n   *   secretKey,\n   *   issuerDomain,\n   *   keyId,\n   * });\n   *\n   * returns\n   * ```ts\n   * \"qr-crypto.v4.public....\"\n   * ```\n   */\n  public async create(\n    parameters: {\n      payload: InstructionPayload;\n      secretKey: string;\n      keyId: string;\n      options?: {\n        expiresIn?: string;\n        subject?: string;\n        audience?: string;\n      };\n    },\n    warnings = true,\n  ) {\n    this.validateParameters(parameters);\n\n    if (warnings && !parameters.options?.expiresIn) {\n      console.warn(\n        \"expiresIn not provided. It is recommended to set an expiration time.\",\n      );\n    }\n\n    const pasetoToken = await this.pasetoHandler.sign(\n      parameters.payload,\n      parameters.secretKey,\n      {\n        issuer: this.issuerDomain,\n        expiresIn: parameters.options?.expiresIn,\n        kid: parameters.keyId,\n        subject: parameters.options?.subject,\n        audience: parameters.options?.audience,\n      },\n    );\n\n    return `qr-crypto.${pasetoToken}`;\n  }\n\n  /**\n   * Validate the payload of the payment instruction\n   *\n   * @param payload - InstructionPayload\n   *\n   * @returns\n   * `void` | `Error`\n   *\n   * @example\n   * ```ts\n   * const builder = new PaymentInstructionsBuilder();\n   *\n   * builder.validatePayload({\n   *   payment: {\n   *     id: \"payment-id\",\n   *     address: \"crypto-address\",\n   *     network_code: NetworkCode.TRON,\n   *     coin_code: CoinCode.TRON_USDT,\n   *     is_open: true,\n   *   },\n   * });\n   * ```\n   */\n  public validatePayload(payload: InstructionPayload) {\n    const [errors] = superstruct.validate(payload, this.payloadSchema);\n    if (errors) {\n      throw new Error(\"Invalid payload:\", { cause: errors });\n    }\n\n    if (!payload.payment.is_open && !payload.payment.amount) {\n      throw new Error(\"payment.amount is required when is_open is true\");\n    }\n  }\n\n  private validateParameters({ payload, secretKey, keyId }) {\n    if (!secretKey) {\n      throw new Error(\"secretKey is required\");\n    }\n\n    if (!keyId) {\n      throw new Error(\"keyId is required\");\n    }\n\n    this.validatePayload(payload);\n  }\n\n  /**\n   * Payload schema\n   *\n   * @private\n   *\n   */\n  private payloadSchema = superstruct.object({\n    payment: superstruct.object({\n      id: superstruct.string(),\n      address: superstruct.string(),\n      address_tag: superstruct.optional(superstruct.string()),\n      network_code: superstruct.enums(Object.values(NetworkCode)),\n      coin_code: superstruct.enums(Object.values(CoinCode)),\n      is_open: superstruct.boolean(),\n      amount: superstruct.optional(\n        superstruct.refine(superstruct.string(), \"amount\", biggerThanZero),\n      ),\n      min_amount: superstruct.optional(\n        superstruct.refine(superstruct.string(), \"min_amount\", biggerThanZero),\n      ),\n      max_amount: superstruct.optional(\n        superstruct.refine(superstruct.string(), \"max_amount\", biggerThanZero),\n      ),\n    }),\n    order: superstruct.optional(\n      superstruct.object({\n        total_amount: superstruct.refine(\n          superstruct.string(),\n          \"total_amount\",\n          biggerThanZero,\n        ),\n        coin_code: superstruct.enums(Object.values(CoinCode)),\n        description: superstruct.optional(superstruct.string()),\n        items: superstruct.refine(\n          superstruct.array(\n            superstruct.object({\n              title: superstruct.string(),\n              description: superstruct.optional(superstruct.string()),\n              amount: superstruct.refine(\n                superstruct.string(),\n                \"amount\",\n                biggerThanZero,\n              ),\n              unit_price: superstruct.optional(\n                superstruct.refine(\n                  superstruct.string(),\n                  \"unit_price\",\n                  biggerThanZero,\n                ),\n              ),\n              quantity: superstruct.refine(\n                superstruct.number(),\n                \"quantity\",\n                (value) => value > 0,\n              ),\n              coin_code: superstruct.enums(Object.values(CoinCode)),\n              image_url: superstruct.optional(superstruct.string()),\n            }),\n          ),\n          \"items\",\n          (value) => value.length > 0,\n        ),\n        merchant: superstruct.object({\n          name: superstruct.string(),\n          description: superstruct.optional(superstruct.string()),\n          tax_id: superstruct.optional(superstruct.string()),\n          image_url: superstruct.optional(superstruct.string()),\n        }),\n      }),\n    ),\n  });\n}\n\n/**\n * Class to handle payment instruction token (qr-crypto token) reading\n *\n * @returns PaymentInstructionsReader\n *\n * @example\n * ```ts\n * const reader = new PaymentInstructionsReader();\n * ```\n */\nexport class PaymentInstructionsReader {\n  private pasetoHandler: PasetoV4Handler;\n\n  constructor() {\n    this.pasetoHandler = new PasetoV4Handler();\n  }\n\n  /**\n   * Read a QR-Crypto payment instruction\n   *\n   * @param qrCrypto - QR-Crypto token string\n   * @param publicKey - string\n   * @param options - ConsumeOptions<true> (optional)\n   *\n   * @returns\n   * ```json{\n   *    payload: CompleteResult<InstructionPayload>;\n   *    footer?: Buffer | Record<string, any>;\n   *    version: \"v4\";\n   *    purpose: \"public\";\n   *  }```\n   *\n   *\n   * @example\n   * ```ts\n   * const reader = new PaymentInstructionsReader();\n   *\n   * reader.read({\n   *    qrCrypto: \"qr-crypto.v4.public....\",\n   *    publicKey: \"some-public-key\",\n   *    issuerDomain: \"qrCrypto.com\",\n   *    options: { subject: \"customer@qrCrypto.com\", audience: \"payer-crypto.com\"}\n   * });\n   *\n   * returns\n   * ```ts\n   * {\n   *   version: \"v4\",\n   *   purpose: \"public\",\n   *   payload: {\n   *    data: {\n   *      payment: {...},\n   *      order: {....}\n   *    },\n   *    iss: \"qrCrypto.com\",\n   *    iat: \"2024-10-29T21:17:00.000Z\",\n   *    exp: \"2024-10-29T21:25:00.000Z\",\n   *    kid: \"some-kid\",\n   *    sub: \"customer@qrCrypto.com\",\n   *    aud: \"payer-crypto.com\"\n   *   }\n   * }\n   * ```\n   */\n  public async read(parameters: {\n    qrCrypto: string;\n    publicKey: string;\n    issuerDomain: string;\n    options?: ConsumeOptions<true>;\n  }) {\n    const isValidQr = parameters.qrCrypto.startsWith(\"qr-crypto.\");\n    if (!isValidQr) {\n      throw new Error(\"Invalid QR-Crypto token\");\n    }\n\n    const token = parameters.qrCrypto.slice(10);\n\n    return this.pasetoHandler.verify<InstructionPayload>(\n      token,\n      parameters.publicKey,\n      {\n        ...parameters.options,\n        complete: true,\n        ignoreExp: false,\n        issuer: parameters.issuerDomain,\n      },\n    );\n  }\n}\n","export enum NetworkCode {\n  BSC = \"BSC\",\n  BITCOIN = \"BITCOIN\",\n  ERC20 = \"ERC20\",\n  LIGHTNING = \"LIGHTNING\",\n  LITECOIN = \"LITECOIN\",\n  POLYGON = \"POLYGON\",\n  SOLANA = \"SOLANA\",\n  TRON = \"TRON\",\n  STELLAR = \"STELLAR\",\n}\n\nexport enum CoinCode {\n  TRON_USDT = \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\",\n  POLYGON_USDT = \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\",\n  POLYGON_USDC = \"0x3c499c542cef5e3811e1192ce70d8cc03d5c3359\",\n}\n\nexport interface InstructionPayload {\n  payment: InstructionPayment;\n  order?: InstructionOrder;\n}\n\nexport interface InstructionPayment {\n  id: string;\n  address: string;\n  address_tag?: string;\n  network_code: NetworkCode;\n  coin_code: CoinCode; // [token SC/address, ISO 4217]\n  is_open: boolean;\n  amount?: string;\n  min_amount?: string;\n  max_amount?: string;\n}\n\nexport interface InstructionMerchant {\n  name: string;\n  description?: string;\n  tax_id?: string;\n  image_url?: string;\n}\n\nexport interface InstructionOrder {\n  total_amount: string;\n  coin_code: string; // [token SC/address, ISO 4217]\n  description?: string;\n  items: InstructionItem[];\n  merchant: InstructionMerchant;\n}\n\nexport interface InstructionItem {\n  title: string;\n  description?: string;\n  amount: string;\n  unit_price?: string;\n  quantity: number;\n  coin_code: string;\n  image_url?: string;\n}\n","export const networkDataMap = {\n  BSC: { network: \"BSC\", name: \"BNB Smart Chain (BEP20)\" },\n  BITCOIN: { network: \"BITCOIN\", name: \"Bitcoin\" },\n  ERC20: { network: \"ERC20\", name: \"Ethereum (ERC20)\" },\n  LIGHTNING: { network: \"LIGHTNING\", name: \"Lightning Network\" },\n  LITECOIN: { network: \"LITECOIN\", name: \"Litecoin\" },\n  POLYGON: { network: \"POLYGON\", name: \"Polygon POS\" },\n  SOLANA: { network: \"SOLANA\", name: \"Solana\" },\n  TRON: { network: \"TRON\", name: \"Tron (TRC20)\" },\n  STELLAR: { network: \"STELLAR\", name: \"Stellar Network\" },\n};\n","import { networkDataMap } from \"../data\";\nimport { NetworkCode } from \"../types\";\n\nexport function getNetworkData(network: string | NetworkCode) {\n  return networkDataMap[network] ?? { network, name: network };\n}\n","import { ConsumeOptions, decode, ProduceOptions, V4 } from \"paseto\";\n\ntype AsymetricKey = \"paserk\";\ntype PasetoTokenContext = \"public\";\n\nexport class PasetoV4Handler {\n  /*\n\n*/\n\n  /**\n   * Generate asymetric public/private key\n   *\n   * @param purpose - Only support \"public\"\n   * @param options - Only support { format: \"paserk\" }\n   *\n   * @returns\n   * `{ secretKey: string; publicKey: string; }`\n   *\n   *\n   * @example\n   * ```ts\n   * PasetoV4Handler.generateKey(\"public\", { format: \"paserk\" });\n   *\n   * returns\n   * {\n   *   secretKey: 'k4.secret.ICXpik-1FLvjjvspZuFpzudF2WMkjsmBECOkjlNR6lb7C_pYpZkYoB6wW0RTVQTSKNO2kYrL55lxnctEY6fabw',\n   *   publicKey: 'k4.public.-wv6WKWZGKAesFtEU1UE0ijTtpGKy-eZcZ3LRGOn2m8'\n   * }\n   *\n   * ```\n   */\n  public static async generateKey(\n    purpose: PasetoTokenContext,\n    options: { format: AsymetricKey },\n  ) {\n    return V4.generateKey(purpose, options);\n  }\n\n  public decode(token: string) {\n    const data = decode(token);\n\n    try {\n      const footer = JSON.parse(data.footer?.toString() ?? \"\");\n      return { ...data, footer };\n    } catch {\n      //\n    }\n\n    return { ...data, footer: data.footer?.toString() };\n  }\n\n  /**\n   *\n   * @remarks\n   * Claims reserved\n   *\n   * | Key |    Name    |  Type  |             Example                 |\n   *\n   * | iss |   Issuer   | string |       {\"iss\":\"paragonie.com\"}       |\n   *\n   * | sub |  Subject   | string |            {\"sub\":\"test\"}           |\n   *\n   * | aud |  Audience  | string |       {\"aud\":\"pie-hosted.com\"}      |\n   *\n   * | exp | Expiration | DtTime | {\"exp\":\"2039-01-01T00:00:00+00:00\"} |\n   *\n   * | nbf | Not Before | DtTime | {\"nbf\":\"2038-04-01T00:00:00+00:00\"} |\n   *\n   * | iat | Issued At  | DtTime | {\"iat\":\"2038-03-17T00:00:00+00:00\"} |\n   *\n   * | jti |  Token ID  | string |  {\"jti\":\"87IFSGFgPNtQNNuw0AtuLttP\"} |\n   *\n   * | kid |   Key-ID   | string |    {\"kid\":\"stored-in-the-footer\"}   |\n   *\n   *\n   *\n   * @param payload - a Record with data to sign\n   * @param privateKey - private key as string\n   * @param options - options for paseto v4 algorimth\n   * @returns\n   * Paseto V4 public token format.\n   */\n  public async sign(\n    payload: Record<string, any>,\n    privateKey: string,\n    options?: ProduceOptions,\n  ) {\n    return V4.sign(payload, privateKey, options);\n  }\n\n  public async verify<Payload>(\n    token: string,\n    publicKey: string,\n    options?: ConsumeOptions<true>,\n  ) {\n    return V4.verify<Payload>(token, publicKey, options);\n  }\n}\n","export function biggerThanZero(value: string) {\n  return parseFloat(value) > 0;\n}\n"],"mappings":"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","names":["NetworkCode","CoinCode","networkDataMap","BSC","network","name","BITCOIN","ERC20","LIGHTNING","LITECOIN","POLYGON","SOLANA","TRON","STELLAR","getNetworkData","network","networkDataMap","name","PasetoV4Handler","generateKey","purpose","options","V4","decode","token","data","footer","JSON","parse","toString","sign","payload","privateKey","verify","publicKey","biggerThanZero","value","parseFloat","PaymentInstructionsBuilder","pasetoHandler","constructor","issuerDomain","payloadSchema","object","payment","id","string","address","address_tag","optional","network_code","enums","Object","values","NetworkCode","coin_code","CoinCode","is_open","boolean","amount","refine","biggerThanZero","min_amount","max_amount","order","total_amount","description","items","array","title","unit_price","quantity","number","value","image_url","length","merchant","name","tax_id","PasetoV4Handler","create","parameters","warnings","validateParameters","options","expiresIn","console","warn","pasetoToken","sign","payload","secretKey","issuer","kid","keyId","subject","audience","validatePayload","errors","validate","Error","cause","PaymentInstructionsReader","read","isValidQr","qrCrypto","startsWith","token","slice","verify","publicKey","complete","ignoreExp"]}