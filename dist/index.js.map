{"version":3,"sources":["../src/index.ts","../src/payment-instruction.ts","../src/types.ts","../src/utils/errors.ts","../src/data/networks.ts","../src/utils/format.ts","../src/utils/paseto.ts","../src/utils/validate.ts"],"sourcesContent":["export * from \"./payment-instruction\";\nexport * from \"./types\";\nexport * from \"./utils\";\n","import { ConsumeOptions } from \"paseto\";\nimport * as superstruct from \"superstruct\";\n\nimport { CoinCode, InstructionPayload, NetworkCode } from \"./types\";\nimport {\n  biggerThanOrEqualZero,\n  biggerThanZero,\n  InvalidPayload,\n  InvalidQrCryptoToken,\n  MissingKeyId,\n  MissingSecretKey,\n  PasetoV4Handler,\n} from \"./utils\";\n\n/**\n * Class to handle payment instruction token (qr-crypto token) creation with payload validation\n *\n * @param issuerDomain - string\n * @returns\n * `PaymentInstructionsBuilder`\n *\n * @example\n * ```ts\n * const builder = new PaymentInstructionsBuilder();\n * ```\n */\n\nexport class PaymentInstructionsBuilder {\n  private pasetoHandler: PasetoV4Handler;\n\n  constructor(private issuerDomain: string) {\n    this.pasetoHandler = new PasetoV4Handler();\n  }\n\n  /**\n   * Create a QR-Crypto payment instruction token\n   *\n   * @param parameters - { payload: InstructionPayload; secretKey: string; }\n   *\n   * @returns\n   * `string`\n   *\n   *\n   * @example\n   * ```ts\n   * const issuerDomain = \"qrCrypto.com\";\n   * const builder = new PaymentInstructionsBuilder(issuerDomain);\n   *\n   * const secretKey = \"...\";\n   * const keyId = \"key-id-one\";\n   *\n   * builder.create({\n   *   payload: {\n   *     payment: {\n   *       id: \"payment-id\",\n   *       address: \"crypto-address\",\n   *       network_code: NetworkCode.TRON,\n   *       coin_code: CoinCode.TRON_USDT,\n   *       is_open: true,\n   *     },\n   *   },\n   *   secretKey,\n   *   issuerDomain,\n   *   keyId,\n   * });\n   *\n   * returns\n   * ```ts\n   * \"qr-crypto.v4.public....\"\n   * ```\n   */\n  public async create(\n    parameters: {\n      payload: InstructionPayload;\n      secretKey: string;\n      keyId: string;\n      options?: {\n        expiresIn?: string;\n        subject?: string;\n        audience?: string;\n      };\n    },\n    warnings = true,\n  ) {\n    this.validateParameters(parameters);\n\n    if (warnings && !parameters.options?.expiresIn) {\n      console.warn(\n        \"\\x1b[33m[WARNING]\\x1b[0m: Field 'expiresIn' not provided in QR-Crypto token creation. It is recommended to set an expiration time.\",\n      );\n    }\n\n    const pasetoToken = await this.pasetoHandler.sign(\n      parameters.payload,\n      parameters.secretKey,\n      {\n        issuer: this.issuerDomain,\n        expiresIn: parameters.options?.expiresIn,\n        kid: parameters.keyId,\n        subject: parameters.options?.subject,\n        audience: parameters.options?.audience,\n      },\n    );\n\n    return `qr-crypto.${pasetoToken}`;\n  }\n\n  /**\n   * Validate the payload of the payment instruction\n   *\n   * @param payload - InstructionPayload\n   *\n   * @returns\n   * `void` | `Error`\n   *\n   * @example\n   * ```ts\n   * const builder = new PaymentInstructionsBuilder();\n   *\n   * builder.validatePayload({\n   *   payment: {\n   *     id: \"payment-id\",\n   *     address: \"crypto-address\",\n   *     network_code: NetworkCode.TRON,\n   *     coin_code: CoinCode.TRON_USDT,\n   *     is_open: true,\n   *   },\n   * });\n   * ```\n   */\n  public validatePayload(payload: InstructionPayload) {\n    const [errors] = superstruct.validate(payload, this.payloadSchema);\n    if (errors) {\n      throw new InvalidPayload(\"Payload does not match the expected schema\");\n    }\n\n    if (!payload.payment.is_open && !payload.payment.amount) {\n      throw new InvalidPayload(\n        \"payment.amount is required when 'is_open' is true\",\n      );\n    }\n  }\n\n  private validateParameters({ payload, secretKey, keyId }) {\n    if (!secretKey) {\n      throw new MissingSecretKey(\"secretKey is required for token creation\");\n    }\n\n    if (!keyId) {\n      throw new MissingKeyId(\"keyId is required for token creation\");\n    }\n\n    this.validatePayload(payload);\n  }\n\n  /**\n   * Payload schema\n   *\n   * @private\n   *\n   */\n  private payloadSchema = superstruct.object({\n    payment: superstruct.object({\n      id: superstruct.string(),\n      address: superstruct.string(),\n      address_tag: superstruct.optional(superstruct.string()),\n      network_code: superstruct.enums(Object.values(NetworkCode)),\n      coin_code: superstruct.string(),\n      is_open: superstruct.boolean(),\n      amount: superstruct.optional(\n        superstruct.refine(superstruct.string(), \"amount\", biggerThanZero),\n      ),\n      min_amount: superstruct.optional(\n        superstruct.refine(superstruct.string(), \"min_amount\", biggerThanZero),\n      ),\n      max_amount: superstruct.optional(\n        superstruct.refine(superstruct.string(), \"max_amount\", biggerThanZero),\n      ),\n    }),\n    order: superstruct.optional(\n      superstruct.object({\n        total_amount: superstruct.refine(\n          superstruct.string(),\n          \"total_amount\",\n          biggerThanZero,\n        ),\n        coin_code: superstruct.string(),\n        description: superstruct.optional(superstruct.string()),\n        items: superstruct.refine(\n          superstruct.array(\n            superstruct.object({\n              title: superstruct.string(),\n              description: superstruct.optional(superstruct.string()),\n              amount: superstruct.refine(\n                superstruct.string(),\n                \"amount\",\n                biggerThanOrEqualZero,\n              ),\n              unit_price: superstruct.optional(\n                superstruct.refine(\n                  superstruct.string(),\n                  \"unit_price\",\n                  biggerThanOrEqualZero,\n                ),\n              ),\n              quantity: superstruct.refine(\n                superstruct.number(),\n                \"quantity\",\n                biggerThanZero,\n              ),\n              coin_code: superstruct.enums(Object.values(CoinCode)),\n              image_url: superstruct.optional(superstruct.string()),\n            }),\n          ),\n          \"items\",\n          (value) => value.length > 0,\n        ),\n        merchant: superstruct.object({\n          name: superstruct.string(),\n          description: superstruct.optional(superstruct.string()),\n          tax_id: superstruct.optional(superstruct.string()),\n          image_url: superstruct.optional(superstruct.string()),\n        }),\n      }),\n    ),\n  });\n}\n\n/**\n * Class to handle payment instruction token (qr-crypto token) reading\n *\n * @returns PaymentInstructionsReader\n *\n * @example\n * ```ts\n * const reader = new PaymentInstructionsReader();\n * ```\n */\nexport class PaymentInstructionsReader {\n  private pasetoHandler: PasetoV4Handler;\n\n  constructor() {\n    this.pasetoHandler = new PasetoV4Handler();\n  }\n\n  /**\n   * Read a QR-Crypto payment instruction\n   *\n   * @param qrCrypto - QR-Crypto token string\n   * @param publicKey - string\n   * @param options - ConsumeOptions<true> (optional)\n   *\n   * @returns\n   * ```json{\n   *    payload: CompleteResult<InstructionPayload>;\n   *    footer?: Buffer | Record<string, any>;\n   *    version: \"v4\";\n   *    purpose: \"public\";\n   *  }```\n   *\n   *\n   * @example\n   * ```ts\n   * const reader = new PaymentInstructionsReader();\n   *\n   * reader.read({\n   *    qrCrypto: \"qr-crypto.v4.public....\",\n   *    publicKey: \"some-public-key\",\n   *    issuerDomain: \"qrCrypto.com\",\n   *    options: { subject: \"customer@qrCrypto.com\", audience: \"payer-crypto.com\"}\n   * });\n   *\n   * returns\n   * ```ts\n   * {\n   *   version: \"v4\",\n   *   purpose: \"public\",\n   *   payload: {\n   *    data: {\n   *      payment: {...},\n   *      order: {....}\n   *    },\n   *    iss: \"qrCrypto.com\",\n   *    iat: \"2024-10-29T21:17:00.000Z\",\n   *    exp: \"2024-10-29T21:25:00.000Z\",\n   *    kid: \"some-kid\",\n   *    sub: \"customer@qrCrypto.com\",\n   *    aud: \"payer-crypto.com\"\n   *   }\n   * }\n   * ```\n   */\n  public async read(parameters: {\n    qrCrypto: string;\n    publicKey: string;\n    issuerDomain: string;\n    options?: ConsumeOptions<true>;\n  }) {\n    const isValidQr = parameters.qrCrypto.startsWith(\"qr-crypto.\");\n    if (!isValidQr) {\n      throw new InvalidQrCryptoToken(\"invalid 'qr-crypto' token prefix\");\n    }\n\n    const token = parameters.qrCrypto.slice(10);\n\n    return this.pasetoHandler.verify<InstructionPayload>(\n      token,\n      parameters.publicKey,\n      {\n        ...parameters.options,\n        complete: true,\n        ignoreExp: false,\n        issuer: parameters.issuerDomain,\n      },\n    );\n  }\n}\n","export enum NetworkCode {\n  BSC = \"BSC\",\n  BITCOIN = \"BITCOIN\",\n  ERC20 = \"ERC20\",\n  LIGHTNING = \"LIGHTNING\",\n  LITECOIN = \"LITECOIN\",\n  POLYGON = \"POLYGON\",\n  SOLANA = \"SOLANA\",\n  TRON = \"TRON\",\n  STELLAR = \"STELLAR\",\n}\n\nexport enum CoinCode {\n  TRON_USDT = \"TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t\",\n  POLYGON_USDT = \"0xc2132d05d31c914a87c6611c10748aeb04b58e8f\",\n  POLYGON_USDC = \"0x3c499c542cef5e3811e1192ce70d8cc03d5c3359\",\n}\n\nexport interface InstructionPayload {\n  payment: InstructionPayment;\n  order?: InstructionOrder;\n}\n\nexport interface InstructionPayment {\n  id: string;\n  address: string;\n  address_tag?: string;\n  network_code: NetworkCode;\n  coin_code: CoinCode; // [token SC/address, ISO 4217]\n  is_open: boolean;\n  amount?: string;\n  min_amount?: string;\n  max_amount?: string;\n}\n\nexport interface InstructionMerchant {\n  name: string;\n  description?: string;\n  tax_id?: string;\n  image_url?: string;\n}\n\nexport interface InstructionOrder {\n  total_amount: string;\n  coin_code: string; // [token SC/address, ISO 4217]\n  description?: string;\n  items: InstructionItem[];\n  merchant: InstructionMerchant;\n}\n\nexport interface InstructionItem {\n  title: string;\n  description?: string;\n  amount: string;\n  unit_price?: string;\n  quantity: number;\n  coin_code: string;\n  image_url?: string;\n}\n","const CODES = {\n  InvalidPayload: \"ERR_INVALID_PAYLOAD\",\n  MissingSecretKey: \"ERR_MISSING_SECRET_KEY\",\n  MissingKeyId: \"ERR_MISSING_KEY_ID\",\n  InvalidQrCryptoToken: \"ERR_INVALID_QR_CRYPTO_TOKEN\",\n} as const;\n\nexport class PayInsError extends Error {\n  public code: string;\n\n  constructor(message: string, noColor = false) {\n    super(message);\n    this.name = noColor\n      ? \"[ERROR] \" + this.constructor.name\n      : \"\\x1b[31m[ERROR]\\x1b[0m \" + this.constructor.name;\n    this.code = CODES[this.constructor.name as keyof typeof CODES];\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nexport class InvalidPayload extends PayInsError {}\nexport class MissingSecretKey extends PayInsError {}\nexport class MissingKeyId extends PayInsError {}\nexport class InvalidQrCryptoToken extends PayInsError {}\n","export const networkDataMap = {\n  BSC: { network: \"BSC\", name: \"BNB Smart Chain (BEP20)\" },\n  BITCOIN: { network: \"BITCOIN\", name: \"Bitcoin\" },\n  ERC20: { network: \"ERC20\", name: \"Ethereum (ERC20)\" },\n  LIGHTNING: { network: \"LIGHTNING\", name: \"Lightning Network\" },\n  LITECOIN: { network: \"LITECOIN\", name: \"Litecoin\" },\n  POLYGON: { network: \"POLYGON\", name: \"Polygon POS\" },\n  SOLANA: { network: \"SOLANA\", name: \"Solana\" },\n  TRON: { network: \"TRON\", name: \"Tron (TRC20)\" },\n  STELLAR: { network: \"STELLAR\", name: \"Stellar Network\" },\n};\n","import { networkDataMap } from \"../data\";\nimport { NetworkCode } from \"../types\";\n\nexport function getNetworkData(network: string | NetworkCode) {\n  return networkDataMap[network] ?? { network, name: network };\n}\n","import { ConsumeOptions, decode, ProduceOptions, V4 } from \"paseto\";\n\ntype AsymetricKey = \"paserk\";\ntype PasetoTokenContext = \"public\";\n\nexport class PasetoV4Handler {\n  /*\n\n*/\n\n  /**\n   * Generate asymetric public/private key\n   *\n   * @param purpose - Only support \"public\"\n   * @param options - Only support { format: \"paserk\" }\n   *\n   * @returns\n   * `{ secretKey: string; publicKey: string; }`\n   *\n   *\n   * @example\n   * ```ts\n   * PasetoV4Handler.generateKey(\"public\", { format: \"paserk\" });\n   *\n   * returns\n   * {\n   *   secretKey: 'k4.secret.ICXpik-1FLvjjvspZuFpzudF2WMkjsmBECOkjlNR6lb7C_pYpZkYoB6wW0RTVQTSKNO2kYrL55lxnctEY6fabw',\n   *   publicKey: 'k4.public.-wv6WKWZGKAesFtEU1UE0ijTtpGKy-eZcZ3LRGOn2m8'\n   * }\n   *\n   * ```\n   */\n  public static async generateKey(\n    purpose: PasetoTokenContext,\n    options: { format: AsymetricKey },\n  ) {\n    return V4.generateKey(purpose, options);\n  }\n\n  /**\n   * Decode paseto token\n   *\n   * @param token - paseto token\n   * @returns\n   * `{ ...data, footer: string | Record<string, any> }`\n   */\n\n  public decode(token: string) {\n    const data = decode(token);\n\n    try {\n      const footer = JSON.parse(data.footer?.toString() ?? \"\");\n      return { ...data, footer };\n    } catch {\n      //\n    }\n\n    return { ...data, footer: data.footer?.toString() };\n  }\n\n  /**\n   *\n   * @remarks\n   * Claims reserved\n   *\n   * | Key |    Name    |  Type  |             Example                 |\n   *\n   * | iss |   Issuer   | string |       {\"iss\":\"paragonie.com\"}       |\n   *\n   * | sub |  Subject   | string |            {\"sub\":\"test\"}           |\n   *\n   * | aud |  Audience  | string |       {\"aud\":\"pie-hosted.com\"}      |\n   *\n   * | exp | Expiration | DtTime | {\"exp\":\"2039-01-01T00:00:00+00:00\"} |\n   *\n   * | nbf | Not Before | DtTime | {\"nbf\":\"2038-04-01T00:00:00+00:00\"} |\n   *\n   * | iat | Issued At  | DtTime | {\"iat\":\"2038-03-17T00:00:00+00:00\"} |\n   *\n   * | jti |  Token ID  | string |  {\"jti\":\"87IFSGFgPNtQNNuw0AtuLttP\"} |\n   *\n   * | kid |   Key-ID   | string |    {\"kid\":\"stored-in-the-footer\"}   |\n   *\n   *\n   *\n   * @param payload - a Record with data to sign\n   * @param privateKey - private key as string\n   * @param options - options for paseto v4 algorimth\n   * @returns\n   * Paseto V4 public token format.\n   */\n  public async sign(\n    payload: Record<string, any>,\n    privateKey: string,\n    options?: ProduceOptions,\n  ) {\n    return V4.sign(payload, privateKey, options);\n  }\n\n  /**\n   * Verify paseto token\n   *\n   * @param token - paseto token\n   * @param publicKey - public key as string\n   * @param options - options for paseto v4 algorimth\n   * @returns\n   * Paseto V4 public token format.\n   */\n  public async verify<Payload>(\n    token: string,\n    publicKey: string,\n    options?: ConsumeOptions<true>,\n  ) {\n    return V4.verify<Payload>(token, publicKey, options);\n  }\n}\n","export function biggerThanZero(value: string | number) {\n  return parseFloat(value.toString()) > 0;\n}\n\nexport function biggerThanOrEqualZero(value: string) {\n  return parseFloat(value) >= 0;\n}\n"],"mappings":"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","names":["NetworkCode","CoinCode","CODES","InvalidPayload","MissingSecretKey","MissingKeyId","InvalidQrCryptoToken","PayInsError","Error","code","constructor","message","noColor","name","captureStackTrace","networkDataMap","BSC","network","name","BITCOIN","ERC20","LIGHTNING","LITECOIN","POLYGON","SOLANA","TRON","STELLAR","getNetworkData","network","networkDataMap","name","PasetoV4Handler","generateKey","purpose","options","V4","decode","token","data","footer","JSON","parse","toString","sign","payload","privateKey","verify","publicKey","biggerThanZero","value","parseFloat","toString","biggerThanOrEqualZero","PaymentInstructionsBuilder","pasetoHandler","constructor","issuerDomain","payloadSchema","object","payment","id","string","address","address_tag","optional","network_code","enums","Object","values","NetworkCode","coin_code","is_open","boolean","amount","refine","biggerThanZero","min_amount","max_amount","order","total_amount","description","items","array","title","biggerThanOrEqualZero","unit_price","quantity","number","CoinCode","image_url","value","length","merchant","name","tax_id","PasetoV4Handler","create","parameters","warnings","validateParameters","options","expiresIn","console","warn","pasetoToken","sign","payload","secretKey","issuer","kid","keyId","subject","audience","validatePayload","errors","validate","InvalidPayload","MissingSecretKey","MissingKeyId","PaymentInstructionsReader","read","isValidQr","qrCrypto","startsWith","InvalidQrCryptoToken","token","slice","verify","publicKey","complete","ignoreExp"]}